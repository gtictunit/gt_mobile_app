import React, { ReactElement } from "react";
import { ViewStyle } from "react-native";
import { WebViewMessageEvent, WebViewSourceHtml, WebViewSourceUri, WebViewNavigationEvent, WebViewProgressEvent, WebViewErrorEvent, WebViewHttpErrorEvent, WebViewNavigation, WebViewScrollEvent, WebViewTerminatedEvent, ShouldStartLoadRequest } from "react-native-webview/lib/WebViewTypes";
interface WebViewProps {
    source: WebViewSourceUri | WebViewSourceHtml;
    style?: ViewStyle;
    optimizeVideoChat?: boolean;
    mediaPlaybackRequiresUserAction?: boolean;
    startInLoadingState?: boolean;
    javaScriptEnabled?: boolean;
    javaScriptCanOpenWindowsAutomatically?: boolean;
    showsHorizontalScrollIndicator?: boolean;
    showsVerticalScrollIndicator?: boolean;
    allowFileAccessFromFileURLs?: boolean;
    allowUniversalAccessFromFileURLs?: boolean;
    incognito?: boolean;
    cacheEnabled?: boolean;
    userAgent?: string;
    applicationNameForUserAgent?: string;
    injectedJavaScript?: string;
    onError?: (event: WebViewErrorEvent) => void;
    onLoad?: (event: WebViewNavigationEvent) => void;
    onLoadEnd?: (event: WebViewNavigationEvent | WebViewErrorEvent) => void;
    onLoadStart?: (event: WebViewNavigationEvent) => void;
    onLoadProgress?: (event: WebViewProgressEvent) => void;
    onHttpError?: (event: WebViewHttpErrorEvent) => void;
    onMessage?: (event: WebViewMessageEvent) => void;
    onNavigationStateChange?: (event: WebViewNavigation) => void;
    onScroll?: (event: WebViewScrollEvent) => void;
    onContentProcessDidTerminate?: (event: WebViewTerminatedEvent) => void;
    onShouldStartLoadWithRequest?: (event: ShouldStartLoadRequest) => boolean;
    originWhitelist?: string[];
    renderLoading?: () => ReactElement;
    renderError?: (errorDomain: string | undefined, errorCode: number, errorDesc: string) => ReactElement;
    containerStyle?: ViewStyle;
}
declare const _default: React.FC<WebViewProps>;
export default _default;
