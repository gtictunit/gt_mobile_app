function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react";
import { StyleSheet, ScrollView, View } from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { withTheme } from "../theming";

function ScreenContainer(_ref) {
  let {
    scrollable = false,
    hasSafeArea = false,
    hasBottomSafeArea = false,
    hasTopSafeArea = false,
    theme,
    style,
    children,
    ...rest
  } = _ref;
  const backgroundColor = theme.colors.background;
  const edges = ["left", "right"];

  if (hasSafeArea || hasTopSafeArea) {
    edges.push("top");
  }

  if (hasSafeArea || hasBottomSafeArea) {
    edges.push("bottom");
  }

  return /*#__PURE__*/React.createElement(SafeAreaView, _extends({
    edges: edges,
    style: [styles.container, {
      backgroundColor
    }]
  }, rest), scrollable ? /*#__PURE__*/React.createElement(ScrollView, {
    contentContainerStyle: [styles.scrollViewContainer, {
      backgroundColor
    }, style]
  }, children) : /*#__PURE__*/React.createElement(View, {
    style: [styles.container, {
      backgroundColor
    }, style]
  }, children));
}

const styles = StyleSheet.create({
  container: {
    flex: 1
  },
  scrollViewContainer: {
    flexGrow: 1,
    flex: undefined
  }
});
export default withTheme(ScreenContainer);
//# sourceMappingURL=ScreenContainer.js.map