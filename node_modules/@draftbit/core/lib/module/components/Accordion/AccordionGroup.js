import * as React from "react";
import { View, StyleSheet, Pressable } from "react-native";
import Text from "../Text";
import { withTheme } from "../../theming";
import { extractStyles } from "../../utilities";

const AccordionGroup = _ref => {
  let {
    label,
    expanded: expandedProp = false,
    openColor,
    closedColor,
    caretColor: caretColorProp,
    caretSize = 24,
    icon,
    iconSize = 24,
    style,
    children,
    theme,
    Icon
  } = _ref;
  const [expanded, setExpanded] = React.useState(expandedProp);
  const {
    textStyles,
    viewStyles
  } = extractStyles(style);
  const expandedColor = openColor || theme.colors.primary;
  const collapsedColor = closedColor || theme.colors.primary;
  const labelColor = expanded ? expandedColor : collapsedColor;
  const caretColor = caretColorProp || labelColor;

  const handlePressAction = () => {
    setExpanded(!expanded);
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Pressable, {
    style: [styles.row, viewStyles],
    onPress: handlePressAction,
    accessibilityRole: "button"
  }, icon ? /*#__PURE__*/React.createElement(Icon, {
    name: icon,
    size: iconSize,
    color: labelColor,
    style: styles.icon
  }) : null, /*#__PURE__*/React.createElement(View, {
    style: styles.content
  }, /*#__PURE__*/React.createElement(Text, {
    selectable: false,
    style: [textStyles, {
      color: labelColor
    }]
  }, label)), /*#__PURE__*/React.createElement(Icon, {
    name: expanded ? "MaterialIcons/keyboard-arrow-up" : "MaterialIcons/keyboard-arrow-down",
    color: caretColor,
    size: caretSize
  })), expanded ? children : null);
};

const styles = StyleSheet.create({
  row: {
    flexDirection: "row",
    alignItems: "center"
  },
  content: {
    flex: 1,
    justifyContent: "center"
  },
  icon: {
    marginRight: 8
  }
});
export default withTheme(AccordionGroup);
//# sourceMappingURL=AccordionGroup.js.map