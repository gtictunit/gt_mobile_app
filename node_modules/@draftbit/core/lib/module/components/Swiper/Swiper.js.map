{"version":3,"names":["React","View","SwiperComponent","Swiper","vertical","loop","timeout","from","prevTitle","nextTitle","prevTitleColor","nextTitleColor","dotsTouchable","dotColor","dotActiveColor","data","keyExtractor","renderItem","children","style","prevTitleStyle","color","nextTitleStyle","dotProps","badgeStyle","backgroundColor","dotActiveStyle","map","item","index","component","key","cloneElement"],"sources":["Swiper.tsx"],"sourcesContent":["import React from \"react\";\nimport { View, StyleProp, ViewStyle } from \"react-native\";\nimport SwiperComponent from \"react-native-web-swiper\";\n\nexport interface SwiperProps<T> {\n  vertical?: boolean;\n  loop?: boolean;\n  from?: number;\n  timeout?: number;\n  prevTitle?: string;\n  nextTitle?: string;\n  prevTitleColor?: string;\n  nextTitleColor?: string;\n  dotsTouchable?: boolean;\n  dotColor?: string;\n  dotActiveColor?: string;\n  children: React.ReactNode;\n  data?: Array<T>;\n  keyExtractor: (item: T, index: number) => string;\n  renderItem?: ({ item, index }: { item: T; index: number }) => JSX.Element;\n  style?: StyleProp<ViewStyle>;\n}\n\nconst Swiper = ({\n  vertical = false,\n  loop = false,\n  timeout = 0,\n  from = 0,\n  prevTitle = \"\",\n  nextTitle = \"\",\n  prevTitleColor,\n  nextTitleColor,\n  dotsTouchable = true,\n  dotColor,\n  dotActiveColor,\n  data,\n  keyExtractor,\n  renderItem,\n  children,\n  style,\n}: SwiperProps<any>) => (\n  <View style={style}>\n    {/* @ts-ignore */}\n    <SwiperComponent\n      from={from}\n      loop={loop}\n      timeout={timeout}\n      vertical={vertical}\n      controlsProps={{\n        prevTitle,\n        nextTitle,\n        prevTitleStyle: { color: prevTitleColor },\n        nextTitleStyle: { color: nextTitleColor },\n        dotsTouchable,\n        ...(dotColor\n          ? { dotProps: { badgeStyle: { backgroundColor: dotColor } } }\n          : {}),\n        ...(dotActiveColor\n          ? { dotActiveStyle: { backgroundColor: dotActiveColor } }\n          : {}),\n      }}\n    >\n      {data && renderItem\n        ? data.map((item, index) => {\n            const component = renderItem({ item, index });\n\n            if (!component) {\n              return null;\n            }\n\n            const key = keyExtractor ? keyExtractor(item, index) : index;\n            return React.cloneElement(component, {\n              key,\n            });\n          })\n        : children}\n    </SwiperComponent>\n  </View>\n);\n\nexport default Swiper;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAA2C,cAA3C;AACA,OAAOC,eAAP,MAA4B,yBAA5B;;AAqBA,MAAMC,MAAM,GAAG;EAAA,IAAC;IACdC,QAAQ,GAAG,KADG;IAEdC,IAAI,GAAG,KAFO;IAGdC,OAAO,GAAG,CAHI;IAIdC,IAAI,GAAG,CAJO;IAKdC,SAAS,GAAG,EALE;IAMdC,SAAS,GAAG,EANE;IAOdC,cAPc;IAQdC,cARc;IASdC,aAAa,GAAG,IATF;IAUdC,QAVc;IAWdC,cAXc;IAYdC,IAZc;IAadC,YAbc;IAcdC,UAdc;IAedC,QAfc;IAgBdC;EAhBc,CAAD;EAAA,oBAkBb,oBAAC,IAAD;IAAM,KAAK,EAAEA;EAAb,gBAEE,oBAAC,eAAD;IACE,IAAI,EAAEZ,IADR;IAEE,IAAI,EAAEF,IAFR;IAGE,OAAO,EAAEC,OAHX;IAIE,QAAQ,EAAEF,QAJZ;IAKE,aAAa,EAAE;MACbI,SADa;MAEbC,SAFa;MAGbW,cAAc,EAAE;QAAEC,KAAK,EAAEX;MAAT,CAHH;MAIbY,cAAc,EAAE;QAAED,KAAK,EAAEV;MAAT,CAJH;MAKbC,aALa;MAMb,IAAIC,QAAQ,GACR;QAAEU,QAAQ,EAAE;UAAEC,UAAU,EAAE;YAAEC,eAAe,EAAEZ;UAAnB;QAAd;MAAZ,CADQ,GAER,EAFJ,CANa;MASb,IAAIC,cAAc,GACd;QAAEY,cAAc,EAAE;UAAED,eAAe,EAAEX;QAAnB;MAAlB,CADc,GAEd,EAFJ;IATa;EALjB,GAmBGC,IAAI,IAAIE,UAAR,GACGF,IAAI,CAACY,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;IACxB,MAAMC,SAAS,GAAGb,UAAU,CAAC;MAAEW,IAAF;MAAQC;IAAR,CAAD,CAA5B;;IAEA,IAAI,CAACC,SAAL,EAAgB;MACd,OAAO,IAAP;IACD;;IAED,MAAMC,GAAG,GAAGf,YAAY,GAAGA,YAAY,CAACY,IAAD,EAAOC,KAAP,CAAf,GAA+BA,KAAvD;IACA,oBAAO7B,KAAK,CAACgC,YAAN,CAAmBF,SAAnB,EAA8B;MACnCC;IADmC,CAA9B,CAAP;EAGD,CAXD,CADH,GAaGb,QAhCN,CAFF,CAlBa;AAAA,CAAf;;AAyDA,eAAef,MAAf"}