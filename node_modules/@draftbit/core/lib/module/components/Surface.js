function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* Copied from https://github.com/callstack/react-native-paper/blob/main/src/components/Surface.tsx */
import * as React from "react";
import { Animated, StyleSheet } from "react-native";
import shadow from "../styles/shadow";
import overlay from "../styles/overlay";
import { withTheme } from "../theming";

const Surface = _ref => {
  let {
    elevation: propElevation,
    style,
    theme,
    children,
    ...rest
  } = _ref;
  const {
    elevation: styleElevation = 3,
    backgroundColor,
    ...restStyle
  } = StyleSheet.flatten(style) || {};
  const {
    dark: isDarkTheme,
    mode,
    colors
  } = theme;
  const elevation = propElevation || styleElevation;
  const evalationStyles = elevation ? shadow(elevation) : {};

  const getBackgroundColor = () => {
    if (backgroundColor) {
      return backgroundColor;
    } else if (isDarkTheme && mode === "adaptive") {
      return overlay(elevation, colors.surface);
    } else {
      return colors.surface;
    }
  };

  return /*#__PURE__*/React.createElement(Animated.View, _extends({}, rest, {
    style: [{
      backgroundColor: getBackgroundColor(),
      elevation,
      ...evalationStyles,
      ...restStyle
    }]
  }), children);
};

export default withTheme(Surface);
//# sourceMappingURL=Surface.js.map