"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SEED_DATA = void 0;

var _types = require("@draftbit/types");

const SEED_DATA_PROPS = {
  allowFontScaling: {
    group: _types.GROUPS.advanced,
    label: "Allow Font Scaling",
    description: "Whether fonts should scale to respect Text Size in the user's accessibility settings. (Default: true)",
    editable: true,
    required: false,
    defaultValue: null,
    formType: _types.FORM_TYPES.boolean,
    propType: _types.PROP_TYPES.BOOLEAN
  },
  autoCapitalize: {
    group: _types.GROUPS.advanced,
    label: "Auto Capitalize",
    description: "Can automatically capitalize sentences, words, and characters (Default: none).",
    editable: true,
    required: false,
    defaultValue: null,
    options: ["none", "sentences", "words", "characters"],
    formType: _types.FORM_TYPES.flatArray,
    propType: _types.PROP_TYPES.STRING
  },
  autoCorrect: {
    group: _types.GROUPS.advanced,
    label: "Auto Correct",
    description: "Enables auto correction",
    editable: true,
    required: false,
    defaultValue: null,
    formType: _types.FORM_TYPES.boolean,
    propType: _types.PROP_TYPES.BOOLEAN
  },
  autoFocus: {
    group: _types.GROUPS.basic,
    label: "Auto Focus",
    description: "Focuses the input on load in and brings up the keyboard",
    editable: true,
    required: false,
    defaultValue: null,
    formType: _types.FORM_TYPES.boolean,
    propType: _types.PROP_TYPES.BOOLEAN
  },
  caretHidden: {
    group: _types.GROUPS.advanced,
    label: "Hide Caret",
    description: "Hides the caret(the line small line underneath each showing where you're editing/typing",
    editable: true,
    required: false,
    defaultValue: null,
    formType: _types.FORM_TYPES.boolean,
    propType: _types.PROP_TYPES.BOOLEAN
  },
  contextMenuHidden: {
    group: _types.GROUPS.advanced,
    label: "Hide Context Menu",
    description: "Hides the system context menu (Default: false)",
    editable: true,
    required: false,
    defaultValue: null,
    formType: _types.FORM_TYPES.boolean,
    propType: _types.PROP_TYPES.BOOLEAN
  },
  disabled: {
    group: _types.GROUPS.basic,
    label: "Disabled",
    description: "Whether the input should be disabled. Will prevent input and show a greyed out state.",
    formType: _types.FORM_TYPES.boolean,
    propType: _types.PROP_TYPES.BOOLEAN,
    defaultValue: false,
    editable: true,
    required: false
  },
  editable: {
    group: _types.GROUPS.advanced,
    label: "Editable",
    description: "If false, the text is not editable",
    editable: true,
    required: false,
    defaultValue: true,
    formType: _types.FORM_TYPES.boolean,
    propType: _types.PROP_TYPES.BOOLEAN
  },
  keyboardAppearance: {
    group: _types.GROUPS.advanced,
    label: "Keyboard Appearance",
    description: "Determines the color of the keyboard.(iOS Only)",
    editable: true,
    required: false,
    defaultValue: null,
    options: ["default", "light", "dark"],
    formType: _types.FORM_TYPES.flatArray,
    propType: _types.PROP_TYPES.STRING
  },
  keyboardType: {
    group: _types.GROUPS.advanced,
    label: "Keyboard Type",
    description: "Determines what keyboard is given to the user.",
    editable: true,
    required: false,
    defaultValue: null,
    options: ["default", "email-address", "numeric", "phone-pad", "ascii-capable", "numbers-and-punctuation", "url", "number-pad", "name-phone-pad", "decimal-pad", "twitter", "web-search", "visible-password"],
    formType: _types.FORM_TYPES.flatArray,
    propType: _types.PROP_TYPES.STRING
  },
  maxLength: {
    group: _types.GROUPS.basic,
    label: "Max Length",
    description: "Limits the input to a set number of characters.",
    editable: true,
    required: false,
    defaultValue: null,
    min: 0,
    step: 1,
    precision: 0,
    formType: _types.FORM_TYPES.number,
    propType: _types.PROP_TYPES.NUMBER
  },
  placeholder: {
    group: _types.GROUPS.data,
    label: "Placeholder Text",
    description: "The text that is shown on load when no value is available.",
    editable: true,
    required: false,
    defaultValue: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
    formType: _types.FORM_TYPES.string,
    propType: _types.PROP_TYPES.STRING
  },
  placeholderTextColor: {
    group: _types.GROUPS.basic,
    label: "Placeholder Text Color",
    description: "The color of the placeholder text.",
    editable: true,
    required: false,
    defaultValue: null,
    formType: _types.FORM_TYPES.color,
    propType: _types.PROP_TYPES.STRING
  },
  returnKeyLabel: {
    group: _types.GROUPS.advanced,
    label: "Return Key Label",
    description: "(Android Only) Sets the label on the return key (use this instead of rewturnKeyType)",
    editable: true,
    required: false,
    defaultValue: null,
    formType: _types.FORM_TYPES.string,
    propType: _types.PROP_TYPES.STRING
  },
  returnKeyType: {
    group: _types.GROUPS.advanced,
    label: "Return Key Type",
    description: "Determines how the return key should look like",
    editable: true,
    required: false,
    defaultValue: null,
    options: ["done", "go", "next", "search", "send", "none", "previous", "default", "emergency-call", "google", "join", "route", "yahoo"],
    formType: _types.FORM_TYPES.flatArray,
    propType: _types.PROP_TYPES.STRING
  },
  secureTextEntry: {
    group: _types.GROUPS.basic,
    label: "Password Input?",
    description: "Hides the characters with a *, useful for passwords and other sensitive information.",
    editable: true,
    required: false,
    defaultValue: null,
    formType: _types.FORM_TYPES.boolean,
    propType: _types.PROP_TYPES.BOOLEAN
  },
  selectionColor: {
    group: _types.GROUPS.advanced,
    label: "Selection Color",
    description: "Color of the highlighted portion when selecting.",
    editable: true,
    required: false,
    defaultValue: null,
    formType: _types.FORM_TYPES.color,
    propType: _types.PROP_TYPES.STRING
  },
  selectTextOnFocus: {
    group: _types.GROUPS.advanced,
    label: "Select Text on Focus",
    description: "If true, all the text will automatically be selected on focus",
    editable: true,
    required: false,
    defaultValue: null,
    formType: _types.FORM_TYPES.boolean,
    propType: _types.PROP_TYPES.BOOLEAN
  },
  label: {
    group: _types.GROUPS.data,
    label: "Label",
    description: "The label to be displayed on the text field",
    formType: _types.FORM_TYPES.string,
    propType: _types.PROP_TYPES.STRING,
    defaultValue: null,
    editable: true,
    required: true
  },
  assistiveText: {
    group: _types.GROUPS.basic,
    label: "Assistive text",
    description: "Helper text to display below the input",
    formType: _types.FORM_TYPES.string,
    propType: _types.PROP_TYPES.STRING,
    defaultValue: null,
    editable: true,
    required: false
  },
  error: {
    group: _types.GROUPS.data,
    label: "Error",
    description: "Whether the input should display the error state",
    formType: _types.FORM_TYPES.boolean,
    propType: _types.PROP_TYPES.BOOLEAN,
    defaultValue: null,
    editable: true,
    required: false
  },
  leftIconName: {
    group: _types.GROUPS.basic,
    label: "Left icon name",
    description: "The icon to display on the left",
    formType: _types.FORM_TYPES.icon,
    propType: _types.PROP_TYPES.ASSET,
    defaultValue: null,
    editable: true,
    required: false
  },
  leftIconMode: {
    group: _types.GROUPS.basic,
    label: "Left icon mode",
    description: "The mode of the icon to display on the left. 'inset' or 'outset'.",
    formType: _types.FORM_TYPES.flatArray,
    propType: _types.PROP_TYPES.STRING,
    defaultValue: null
    /* inset */
    ,
    options: ["inset", "outset"],
    editable: true,
    required: true
  },
  rightIconName: {
    group: _types.GROUPS.basic,
    label: "Right icon name",
    description: "The icon to display on the right",
    formType: _types.FORM_TYPES.icon,
    propType: _types.PROP_TYPES.ASSET,
    defaultValue: null,
    editable: true,
    required: false
  },
  fieldName: { ..._types.FIELD_NAME,
    handlerPropName: "onChangeText",
    defaultValue: "textFieldValue"
  }
};
const SEED_DATA_TRIGGERS = [_types.Triggers.OnChangeText];
const SEED_DATA = [{
  name: "Styled Text Field",
  tag: "TextField",
  description: "A text input with a solid border or underline",
  category: _types.COMPONENT_TYPES.input,
  preview_image_url: "{CLOUDINARY_URL}/Textfield.png",
  supports_list_render: false,
  triggers: SEED_DATA_TRIGGERS,
  props: { ...SEED_DATA_PROPS,
    type: {
      label: "Appearance",
      description: "Type of Datepicker",
      formType: _types.FORM_TYPES.flatArray,
      propType: _types.PROP_TYPES.STRING,
      defaultValue: "solid",
      options: ["solid", "underline"],
      editable: true,
      required: true,
      group: _types.GROUPS.basic
    },
    underlineColor: (0, _types.createColorProp)({
      label: "Underline Color",
      defaultValue: "light"
    }),
    activeBorderColor: (0, _types.createColorProp)({
      label: "Active Border Color",
      defaultValue: "primary"
    }),
    secureTextEntry: {
      group: _types.GROUPS.basic,
      label: "Password field",
      description: "If true, this turns the field into a password field, hiding the text",
      formType: _types.FORM_TYPES.boolean,
      propType: _types.PROP_TYPES.BOOLEAN,
      defaultValue: null,
      editable: true,
      required: false
    }
  },
  layout: {}
}, {
  name: "Styled Text Area",
  tag: "TextField",
  description: "A text area with a solid border or underline",
  category: _types.COMPONENT_TYPES.input,
  stylesPanelSections: [_types.StylesPanelSections.Typography, _types.StylesPanelSections.Background, _types.StylesPanelSections.Size, _types.StylesPanelSections.MarginsAndPaddings, _types.StylesPanelSections.Position, _types.StylesPanelSections.Borders, _types.StylesPanelSections.Effects],
  preview_image_url: "{CLOUDINARY_URL}/TextArea.png",
  supports_list_render: false,
  triggers: SEED_DATA_TRIGGERS,
  props: { ...SEED_DATA_PROPS,
    type: {
      label: "Appearance",
      description: "Type of Datepicker",
      formType: _types.FORM_TYPES.flatArray,
      propType: _types.PROP_TYPES.STRING,
      defaultValue: "solid",
      options: ["solid", "underline"],
      editable: true,
      required: true,
      group: _types.GROUPS.basic
    },
    multiline: {
      label: "Multiline",
      description: "Multiline",
      group: _types.GROUPS.uncategorized,
      formType: _types.FORM_TYPES.boolean,
      propType: _types.PROP_TYPES.BOOLEAN,
      defaultValue: true,
      editable: false,
      required: false
    },
    numberOfLines: (0, _types.createNumberProp)({
      label: "Number of Lines",
      description: "Number of Lines for Multiline Field",
      defaultValue: 4,
      group: _types.GROUPS.basic
    }),
    fieldName: (0, _types.createFieldNameProp)({
      defaultValue: "textAreaValue"
    })
  },
  layout: {}
}];
exports.SEED_DATA = SEED_DATA;
//# sourceMappingURL=TextField.js.map