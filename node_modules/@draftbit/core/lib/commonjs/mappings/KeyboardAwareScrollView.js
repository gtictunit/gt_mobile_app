"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SEED_DATA = void 0;

var _types = require("@draftbit/types");

const SEED_DATA = {
  name: "Keyboard Aware Scroll View",
  tag: "KeyboardAwareScrollView",
  description: "View that moves pushes the content when virtual keyboard is open.",
  category: _types.COMPONENT_TYPES.layout,
  stylesPanelSections: _types.CONTAINER_COMPONENT_STYLES_SECTIONS,
  layout: {},
  props: {
    viewIsInsideTabBar: (0, _types.createStaticBoolProp)({
      label: "View Is Inside TabBar",
      description: "Adds an extra offset that represents the TabBarIOS height."
    }),
    enableAutomaticScroll: (0, _types.createStaticBoolProp)({
      label: "Enable Automatic Scroll",
      description: "When focus in TextInput will scroll the position, default is enabled"
    }),
    extraHeight: (0, _types.createStaticNumberProp)({
      label: "Extra Height",
      description: "Adds an extra offset when focusing the TextInputs"
    }),
    extraScrollHeight: (0, _types.createStaticNumberProp)({
      label: "Extra Scroll Height",
      description: "Adds an extra offset to the keyboard. Useful if you want to stick elements above the keyboard"
    }),
    enableResetScrollToCoords: (0, _types.createStaticBoolProp)({
      label: "Enable Reset Scroll To Coordinates",
      description: "Lets the user enable or disable automatic resetScrollToCoords"
    }),
    keyboardOpeningTime: (0, _types.createStaticNumberProp)({
      label: "Opening Time",
      description: "Sets the delay time before scrolling to new position after keyboard opening, default is 250"
    }),
    enableOnAndroid: (0, _types.createStaticBoolProp)({
      label: "Enable On Android",
      description: "Enable Android Support"
    }),
    showsVerticalScrollIndicator: (0, _types.createStaticBoolProp)({
      label: "Shows Vertical Scroll Indicator",
      description: "Show or hide the vertical scroll indicator",
      defaultValue: true
    }),
    keyboardShouldPersistTaps: (0, _types.createTextEnumProp)({
      label: "Allow Touch Events",
      description: "Allows touch events on visible components to be processed while the keyboard is open",
      defaultValue: "never",
      options: ["never", "always"]
    })
  }
};
exports.SEED_DATA = SEED_DATA;
//# sourceMappingURL=KeyboardAwareScrollView.js.map