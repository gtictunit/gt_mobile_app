"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SEED_DATA_PROPS = exports.SEED_DATA = void 0;

var _types = require("@draftbit/types");

const SEED_DATA_PROPS = {
  style: {
    group: _types.GROUPS.basic,
    label: "Style",
    description: "Text Style",
    editable: false,
    required: false,
    formType: _types.FORM_TYPES.typeStyle,
    propType: _types.PROP_TYPES.THEME,
    defaultValue: null
  },
  clearButtonMode: {
    group: _types.GROUPS.basic,
    label: "Clear Button Mode",
    description: "Enables a button within the textInput to clear the data entered",
    editable: true,
    required: false,
    options: ["never", "while-editing", "unless-editing", "always"],
    defaultValue: null,
    formType: _types.FORM_TYPES.flatArray,
    propType: _types.PROP_TYPES.STRING
  },
  clearTextOnFocus: {
    group: _types.GROUPS.basic,
    label: "Clear Text on Focus",
    description: "If true, clears the text field automatically when its focused.",
    editable: true,
    required: false,
    defaultValue: null,
    formType: _types.FORM_TYPES.boolean,
    propType: _types.PROP_TYPES.BOOLEAN
  },
  enablesReturnKeyAutomatically: {
    group: _types.GROUPS.basic,
    label: "Enables Return Key Automatically",
    description: "If true, the keyboard disables the return key when there is no text and automatically enables it when there is (Default: false)",
    editable: true,
    required: false,
    defaultValue: null,
    formType: _types.FORM_TYPES.boolean,
    propType: _types.PROP_TYPES.BOOLEAN
  },
  underlineColorAndroid: {
    group: _types.GROUPS.basic,
    label: "Underline color",
    description: "(Android Only) The color of the underline(the line underneath the text when finished typing.",
    editable: true,
    required: false,
    defaultValue: null,
    formType: _types.FORM_TYPES.color,
    propType: _types.PROP_TYPES.THEME
  },
  fieldName: { ..._types.FIELD_NAME,
    defaultValue: "textInputValue",
    handlerPropName: "onChangeText"
  }
};
exports.SEED_DATA_PROPS = SEED_DATA_PROPS;
const SEED_DATA = [{
  name: "Text Input",
  tag: "TextInput",
  description: "An input field that allows users to type in data.",
  category: _types.COMPONENT_TYPES.input,
  stylesPanelSections: [_types.StylesPanelSections.Typography, _types.StylesPanelSections.Background, _types.StylesPanelSections.Size, _types.StylesPanelSections.MarginsAndPaddings, _types.StylesPanelSections.Position, _types.StylesPanelSections.Borders, _types.StylesPanelSections.Effects],
  preview_image_url: "https://res.cloudinary.com/altos/image/upload/draftbit/Jigsaw/TextInput.png",
  supports_list_render: false,
  layout: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderColor: "divider",
    paddingLeft: 8,
    paddingRight: 8,
    paddingTop: 8,
    paddingBottom: 8,
    borderRadius: 8
  },
  triggers: [_types.Triggers.OnChangeText],
  props: {
    allowFontScaling: {
      group: _types.GROUPS.advanced,
      label: "Allow Font Scaling",
      description: "Whether fonts should scale to respect Text Size in the user's accessibility settings. (Default: true)",
      editable: true,
      required: false,
      defaultValue: null,
      formType: _types.FORM_TYPES.boolean,
      propType: _types.PROP_TYPES.BOOLEAN
    },
    autoCapitalize: {
      group: _types.GROUPS.advanced,
      label: "Auto Capitalize",
      description: "Can automatically capitalize sentences, words, and characters (Default: none).",
      editable: true,
      required: false,
      defaultValue: null,
      options: ["none", "sentences", "words", "characters"],
      formType: _types.FORM_TYPES.flatArray,
      propType: _types.PROP_TYPES.STRING
    },
    autoCorrect: {
      group: _types.GROUPS.advanced,
      label: "Auto Correct",
      description: "Enables auto correction",
      editable: true,
      required: false,
      defaultValue: null,
      formType: _types.FORM_TYPES.boolean,
      propType: _types.PROP_TYPES.BOOLEAN
    },
    autoFocus: {
      group: _types.GROUPS.basic,
      label: "Auto Focus",
      description: "Focuses the input on load in and brings up the keyboard",
      editable: true,
      required: false,
      defaultValue: null,
      formType: _types.FORM_TYPES.boolean,
      propType: _types.PROP_TYPES.BOOLEAN
    },
    caretHidden: {
      group: _types.GROUPS.advanced,
      label: "Hide Caret",
      description: "Hides the caret(the line small line underneath each showing where you're editing/typing",
      editable: true,
      required: false,
      defaultValue: null,
      formType: _types.FORM_TYPES.boolean,
      propType: _types.PROP_TYPES.BOOLEAN
    },
    contextMenuHidden: {
      group: _types.GROUPS.advanced,
      label: "Hide Context Menu",
      description: "Hides the system context menu (Default: false)",
      editable: true,
      required: false,
      defaultValue: null,
      formType: _types.FORM_TYPES.boolean,
      propType: _types.PROP_TYPES.BOOLEAN
    },
    editable: {
      group: _types.GROUPS.advanced,
      label: "Editable",
      description: "If false, the text is not editable",
      editable: true,
      required: false,
      defaultValue: true,
      formType: _types.FORM_TYPES.boolean,
      propType: _types.PROP_TYPES.BOOLEAN
    },
    keyboardAppearance: {
      group: _types.GROUPS.advanced,
      label: "Keyboard Appearance",
      description: "Determines the color of the keyboard.(iOS Only)",
      editable: true,
      required: false,
      defaultValue: null,
      options: ["default", "light", "dark"],
      formType: _types.FORM_TYPES.flatArray,
      propType: _types.PROP_TYPES.STRING
    },
    keyboardType: {
      group: _types.GROUPS.advanced,
      label: "Keyboard Type",
      description: "Determines what keyboard is given to the user.",
      editable: true,
      required: false,
      defaultValue: null,
      options: ["default", "email-address", "numeric", "phone-pad", "ascii-capable", "numbers-and-punctuation", "url", "number-pad", "name-phone-pad", "decimal-pad", "twitter", "web-search", "visible-password"],
      formType: _types.FORM_TYPES.flatArray,
      propType: _types.PROP_TYPES.STRING
    },
    maxLength: {
      group: _types.GROUPS.basic,
      label: "Max Length",
      description: "Limits the input to a set number of characters.",
      editable: true,
      required: false,
      defaultValue: null,
      min: 0,
      step: 1,
      precision: 0,
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER
    },
    placeholder: {
      group: _types.GROUPS.data,
      label: "Placeholder Text",
      description: "The text that is shown on load when no value is available.",
      editable: true,
      required: false,
      defaultValue: "Enter a value...",
      formType: _types.FORM_TYPES.string,
      propType: _types.PROP_TYPES.STRING
    },
    placeholderTextColor: {
      group: _types.GROUPS.basic,
      label: "Placeholder Text Color",
      description: "The color of the placeholder text.",
      editable: true,
      required: false,
      defaultValue: null,
      formType: _types.FORM_TYPES.color,
      propType: _types.PROP_TYPES.STRING
    },
    returnKeyLabel: {
      group: _types.GROUPS.advanced,
      label: "Return Key Label",
      description: "(Android Only) Sets the label on the return key (use this instead of rewturnKeyType)",
      editable: true,
      required: false,
      defaultValue: null,
      formType: _types.FORM_TYPES.string,
      propType: _types.PROP_TYPES.STRING
    },
    returnKeyType: {
      group: _types.GROUPS.advanced,
      label: "Return Key Type",
      description: "Determines how the return key should look like",
      editable: true,
      required: false,
      defaultValue: null,
      options: ["done", "go", "next", "search", "send", "none", "previous", "default", "emergency-call", "google", "join", "route", "yahoo"],
      formType: _types.FORM_TYPES.flatArray,
      propType: _types.PROP_TYPES.STRING
    },
    secureTextEntry: {
      group: _types.GROUPS.basic,
      label: "Password Input?",
      description: "Hides the characters with a *, useful for passwords and other sensitive information.",
      editable: true,
      required: false,
      defaultValue: null,
      formType: _types.FORM_TYPES.boolean,
      propType: _types.PROP_TYPES.BOOLEAN
    },
    selectionColor: {
      group: _types.GROUPS.advanced,
      label: "Selection Color",
      description: "Color of the highlighted portion when selecting.",
      editable: true,
      required: false,
      defaultValue: null,
      formType: _types.FORM_TYPES.color,
      propType: _types.PROP_TYPES.STRING
    },
    selectTextOnFocus: {
      group: _types.GROUPS.advanced,
      label: "Select Text on Focus",
      description: "If true, all the text will automatically be selected on focus",
      editable: true,
      required: false,
      defaultValue: null,
      formType: _types.FORM_TYPES.boolean,
      propType: _types.PROP_TYPES.BOOLEAN
    },
    ...SEED_DATA_PROPS,
    multiline: {
      group: _types.GROUPS.basic,
      label: "Multiple Lines",
      description: "Allows multiple lines of input, useful for situations where the user may be typing in a lot of data.",
      editable: true,
      required: false,
      defaultValue: null,
      formType: _types.FORM_TYPES.boolean,
      propType: _types.PROP_TYPES.BOOLEAN
    },
    numberOfLines: {
      group: _types.GROUPS.basic,
      label: "Number of Lines",
      description: "Sets the number of lines for the input (Multiple Lines needs to be true)",
      editable: true,
      required: false,
      defaultValue: null,
      min: 0,
      step: 1,
      precision: 0,
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER
    },
    scrollEnabled: {
      group: _types.GROUPS.basic,
      label: "Scroll Enabled",
      description: "If false, scrolling of the input will be disabled. Only works when Multiple Lines is true",
      editable: true,
      required: false,
      defaultValue: null,
      formType: _types.FORM_TYPES.boolean,
      propType: _types.PROP_TYPES.BOOLEAN
    },
    spellcheck: {
      group: _types.GROUPS.basic,
      label: "Disable Spell Check",
      description: "If false, disables spell-check style (red underlines). Default comes from Auto Correct",
      editable: true,
      required: false,
      defaultValue: null,
      formType: _types.FORM_TYPES.boolean,
      propType: _types.PROP_TYPES.BOOLEAN
    },
    textContentType: {
      group: _types.GROUPS.advanced,
      label: "Text Content Type",
      description: "Give the keyboard and system about what it should do with the input. For example, if its an address, autofill from address book",
      editable: true,
      required: false,
      defaultValue: null,
      options: ["none", "URL", "addressCity", "addressCityAndState", "addressState", "countryName", "creditCardNumber", "emailAddress", "familyName", "fullStreetAddress", "givenName", "jobTitle", "location", "middleName", "name", "namePrefix", "nameSuffix", "nickname", "organizationName", "postalCode", "streetAddressLine1", "streetAddressLine2", "sublocality", "telephoneNumber", "username", "password"],
      formType: _types.FORM_TYPES.flatArray,
      propType: _types.PROP_TYPES.STRING
    },
    textBreakStrategy: {
      group: _types.GROUPS.advanced,
      label: "Text Break Strategy",
      description: "(Android Only) Set the text break strategy. (Default: simple)",
      editable: true,
      required: false,
      defaultValue: null,
      options: ["simple", "highQuality", "balanced"],
      formType: _types.FORM_TYPES.flatArray,
      propType: _types.PROP_TYPES.STRING
    }
  }
}];
exports.SEED_DATA = SEED_DATA;
//# sourceMappingURL=TextInput.js.map