"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _lodash = require("lodash");

var _reactNativeSafeAreaContext = require("react-native-safe-area-context");

var _picker = require("@react-native-picker/picker");

var _theming = require("../../theming");

var _Portal = _interopRequireDefault(require("../Portal/Portal"));

var _DeprecatedButton = _interopRequireDefault(require("../DeprecatedButton"));

var _Touchable = _interopRequireDefault(require("../Touchable"));

var _utilities = require("../../utilities");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function normalizeOptions(options) {
  if (options.length === 0) {
    return [];
  }

  if (typeof options[0] === ("string" || "number")) {
    return options.map(option => ({
      label: String(option),
      value: String(option)
    }));
  }

  if ((0, _lodash.isObject)(options[0]) && options[0].value !== null && options[0].label !== null) {
    return options.map(option => {
      return {
        label: String(option.label),
        value: String(option.value)
      };
    });
  }

  throw new Error('Picker options must be either an array of strings or array of { "label": string; "value": string; } objects.');
}

const {
  width: deviceWidth,
  height: deviceHeight
} = _reactNative.Dimensions.get("screen");

const isIos = _reactNative.Platform.OS === "ios";
const unstyledColor = "rgba(165, 173, 183, 1)";
const disabledColor = "rgb(240, 240, 240)";
const errorColor = "rgba(255, 69, 100, 1)";

const Picker = _ref => {
  var _find$label, _find;

  let {
    error,
    options = [],
    onValueChange,
    defaultValue,
    Icon,
    style,
    placeholder,
    value,
    disabled = false,
    theme,
    assistiveText,
    label,
    iconColor = unstyledColor,
    iconSize = 24,
    leftIconMode = "inset",
    leftIconName,
    placeholderTextColor = unstyledColor,
    rightIconName,
    type = "solid"
  } = _ref;
  const androidPickerRef = React.useRef(undefined);
  const [internalValue, setInternalValue] = React.useState(value || defaultValue);
  const [pickerVisible, setPickerVisible] = React.useState(false);

  const togglePickerVisible = () => {
    setPickerVisible(!pickerVisible);
  };

  React.useEffect(() => {
    if (value != null) {
      setInternalValue(value);
    }
  }, [value]);
  React.useEffect(() => {
    if (defaultValue != null) {
      setInternalValue(defaultValue);
    }
  }, [defaultValue]);
  React.useEffect(() => {
    if (pickerVisible && androidPickerRef.current) {
      var _androidPickerRef$cur;

      androidPickerRef === null || androidPickerRef === void 0 ? void 0 : (_androidPickerRef$cur = androidPickerRef.current) === null || _androidPickerRef$cur === void 0 ? void 0 : _androidPickerRef$cur.focus();
    }
  }, [pickerVisible, androidPickerRef]);
  const normalizedOptions = normalizeOptions(options);
  const pickerOptions = placeholder ? [{
    value: placeholder,
    label: placeholder
  }, ...normalizedOptions] : normalizedOptions;
  const {
    colors
  } = theme;
  const {
    viewStyles,
    textStyles
  } = (0, _utilities.extractStyles)(style);
  const additionalBorderStyles = ["backgroundColor"];
  const additionalMarginStyles = ["bottom", "height", "left", "maxHeight", "maxWidth", "minHeight", "minWidth", "overflow", "position", "right", "top", "width", "zIndex"];
  const {
    borderStyles: extractedBorderStyles,
    marginStyles: extractedMarginStyles
  } = (0, _utilities.extractBorderAndMarginStyles)(viewStyles, additionalBorderStyles, additionalMarginStyles);
  const borderStyles = { ...{ ...(type === "solid" ? {
        borderTopLeftRadius: 5,
        borderTopRightRadius: 5,
        borderBottomRightRadius: 5,
        borderBottomLeftRadius: 5,
        borderTopWidth: 1,
        borderRightWidth: 1,
        borderLeftWidth: 1
      } : {}),
      borderBottomWidth: 1,
      borderColor: unstyledColor,
      borderStyle: "solid"
    },
    ...extractedBorderStyles,
    ...(error ? {
      borderColor: errorColor
    } : {}),
    ...(disabled ? {
      borderColor: "transparent",
      backgroundColor: disabledColor
    } : {})
  };
  const marginStyles = {
    height: 60,
    ...extractedMarginStyles
  };
  const stylesWithoutBordersAndMargins = (0, _lodash.omit)(viewStyles, [..._utilities.borderStyleNames, ..._utilities.marginStyleNames, ...additionalBorderStyles, ...additionalMarginStyles]);
  const selectedLabel = internalValue && ((_find$label = (_find = pickerOptions.find(option => option.value === internalValue)) === null || _find === void 0 ? void 0 : _find.label) !== null && _find$label !== void 0 ? _find$label : internalValue);
  const labelText = label ? /*#__PURE__*/React.createElement(_reactNative.Text, {
    style: {
      textAlign: textStyles.textAlign,
      color: unstyledColor,
      fontSize: 12,
      paddingBottom: 4
    }
  }, label) : null;
  const leftIconOutset = leftIconMode === "outset";
  const leftIcon = leftIconName ? /*#__PURE__*/React.createElement(Icon, {
    name: leftIconName,
    color: disabled ? unstyledColor : iconColor,
    size: iconSize,
    style: {
      marginRight: 4,
      marginLeft: 4
    }
  }) : null;
  const rightIcon = rightIconName ? /*#__PURE__*/React.createElement(Icon, {
    name: rightIconName,
    color: disabled ? unstyledColor : iconColor,
    size: iconSize,
    style: {
      marginRight: -10,
      marginLeft: 8
    }
  }) : null;
  const textAlign = textStyles === null || textStyles === void 0 ? void 0 : textStyles.textAlign;

  const calculateLeftPadding = () => {
    if (leftIconOutset) {
      if (textAlign === "center") {
        return iconSize - Math.abs(8 - iconSize);
      }

      return iconSize + 8;
    }

    return 0;
  };

  const assistiveTextLabel = assistiveText ? /*#__PURE__*/React.createElement(_reactNative.Text, {
    style: {
      textAlign,
      width: "100%",
      paddingLeft: calculateLeftPadding(),
      color: unstyledColor,
      fontSize: 12,
      paddingTop: 4
    }
  }, assistiveText) : null;
  const primaryTextStyle = {
    color: unstyledColor,
    fontSize: 14,
    ...(0, _lodash.pickBy)(textStyles, _lodash.identity),
    ...(placeholder === internalValue ? {
      color: placeholderTextColor
    } : {}),
    ...(disabled ? {
      color: unstyledColor
    } : {})
  };

  const handleValueChange = (newValue, itemIndex) => {
    if (!placeholder || itemIndex > 0) {
      onValueChange === null || onValueChange === void 0 ? void 0 : onValueChange(newValue, itemIndex);
    }

    setInternalValue(newValue);
  };

  return (
    /*#__PURE__*/

    /* marginsContainer */
    React.createElement(_reactNative.View, {
      style: [styles.marginsContainer, marginStyles]
    }, /*#__PURE__*/React.createElement(_Touchable.default, {
      disabled: disabled,
      onPress: togglePickerVisible,
      style: styles.touchableContainer
    }, /*#__PURE__*/React.createElement(_reactNative.View, {
      pointerEvents: "none",
      style: [styles.outsetContainer, stylesWithoutBordersAndMargins, !leftIconOutset ? borderStyles : {}]
    }, leftIcon, /*#__PURE__*/React.createElement(_reactNative.View, {
      style: [styles.insetContainer, leftIconOutset ? borderStyles : {}]
    }, /*#__PURE__*/React.createElement(_reactNative.View, {
      style: styles.primaryTextContainer
    }, labelText, /*#__PURE__*/React.createElement(_reactNative.Text, {
      style: primaryTextStyle
    }, String(selectedLabel !== null && selectedLabel !== void 0 ? selectedLabel : placeholder))), rightIcon)), assistiveTextLabel), isIos && pickerVisible ? /*#__PURE__*/React.createElement(_Portal.default, null, /*#__PURE__*/React.createElement(_reactNative.View, {
      style: [styles.iosPicker, {
        backgroundColor: colors.divider
      }]
    }, /*#__PURE__*/React.createElement(_reactNativeSafeAreaContext.SafeAreaView, {
      style: styles.iosSafeArea
    }, /*#__PURE__*/React.createElement(_DeprecatedButton.default, {
      Icon: Icon,
      type: "text",
      onPress: togglePickerVisible,
      style: styles.iosButton
    }, "Close"), /*#__PURE__*/React.createElement(_picker.Picker, {
      style: styles.iosNativePicker,
      selectedValue: internalValue,
      onValueChange: handleValueChange
    }, pickerOptions.map(option => /*#__PURE__*/React.createElement(_picker.Picker.Item, {
      label: option.label,
      value: option.value,
      key: option.value
    })))))) : null, !isIos && pickerVisible ? /*#__PURE__*/React.createElement(_picker.Picker, {
      enabled: pickerVisible,
      selectedValue: internalValue,
      onValueChange: handleValueChange,
      style: styles.nonIosPicker,
      ref: androidPickerRef,
      onBlur: () => setPickerVisible(false)
    }, pickerOptions.map(option => /*#__PURE__*/React.createElement(_picker.Picker.Item, {
      label: option.label,
      value: option.value,
      key: option.value
    }))) : null)
  );
};

var _default = (0, _theming.withTheme)(Picker);

exports.default = _default;

const styles = _reactNative.StyleSheet.create({
  marginsContainer: {
    alignSelf: "stretch",
    alignItems: "center",
    width: "100%",
    maxWidth: deviceWidth
  },
  touchableContainer: {
    flex: 1,
    height: "100%",
    width: "100%",
    alignSelf: "stretch",
    alignItems: "center"
  },
  outsetContainer: {
    flex: 1,
    height: "100%",
    width: "100%",
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between"
  },
  insetContainer: {
    flex: 1,
    height: "100%",
    width: "100%",
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingLeft: 12,
    paddingRight: 12
  },
  primaryTextContainer: {
    flex: 1
  },
  iosPicker: {
    position: "absolute",
    bottom: 0,
    left: 0,
    right: 0,
    flexDirection: "row",
    justifyContent: "center",
    width: "100%",
    maxWidth: deviceWidth,
    maxHeight: deviceHeight
  },
  iosSafeArea: {
    backgroundColor: "white",
    flexDirection: "column",
    width: "100%",
    maxWidth: deviceWidth
  },
  iosButton: {
    alignSelf: "flex-end"
  },
  iosNativePicker: {
    backgroundColor: "white"
  },
  nonIosPicker: {
    opacity: 0,
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    width: "100%",
    maxWidth: deviceWidth,
    maxHeight: deviceHeight
  }
});
//# sourceMappingURL=Picker.js.map