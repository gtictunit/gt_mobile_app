"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Surface = _interopRequireDefault(require("./Surface"));

var _shadow = _interopRequireDefault(require("../styles/shadow"));

var _theming = require("../theming");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const ELEVATION = 1;
const DEFAULT_MAX_WIDTH = 960;

const Banner = _ref => {
  let {
    initiallyVisible = true,
    dismissable = true,
    icon,
    buttonColor,
    content,
    contentStyle,
    style,
    theme,
    Icon,
    ...rest
  } = _ref;
  const [visible, setVisible] = React.useState(initiallyVisible);
  React.useEffect(() => {
    if (initiallyVisible) {
      setVisible(true);
    }
  }, [initiallyVisible]);
  const {
    current: position
  } = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0));
  const [layout, setLayout] = React.useState({
    height: 0,
    measured: false
  });
  React.useEffect(() => {
    if (visible) {
      // show
      _reactNative.Animated.timing(position, {
        duration: 250,
        toValue: 1,
        useNativeDriver: false
      }).start();
    } else {
      // hide
      _reactNative.Animated.timing(position, {
        duration: 200,
        toValue: 0,
        useNativeDriver: false
      }).start();
    }
  }, [visible, position]);

  const handleLayout = _ref2 => {
    let {
      nativeEvent
    } = _ref2;
    const {
      height
    } = nativeEvent.layout;
    setLayout({
      height,
      measured: true
    });
  }; // The banner animation has 2 parts:
  // 1. Blank spacer element which animates its height to move the content
  // 2. Actual banner which animates its translateY
  // In initial render, we position everything normally and measure the height of the banner
  // Once we have the height, we apply the height to the spacer and switch the banner to position: absolute
  // We need this because we need to move the content below as if banner's height was being animated
  // However we can't animated banner's height directly as it'll also resize the content inside


  const height = _reactNative.Animated.multiply(position, layout.height);

  const translateY = _reactNative.Animated.multiply(_reactNative.Animated.add(position, -1), layout.height);

  return /*#__PURE__*/React.createElement(_Surface.default, _extends({}, rest, {
    style: [styles.container, (0, _shadow.default)(ELEVATION), style]
  }), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.wrapper, contentStyle]
  }, /*#__PURE__*/React.createElement(_reactNative.Animated.View, {
    style: {
      height
    }
  }), /*#__PURE__*/React.createElement(_reactNative.Animated.View, {
    onLayout: handleLayout,
    style: [layout.measured || !visible ? // If we have measured banner's height or it's invisible,
    // Position it absolutely, the layout will be taken care of the spacer
    [styles.absolute, {
      transform: [{
        translateY
      }]
    }] : // Otherwise position it normally
    null, !layout.measured && !visible ? // If we haven't measured banner's height yet and it's invisible,
    // hide it with opacity: 0 so user doesn't see it
    {
      opacity: 0
    } : null]
  }, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.content, {
      marginBottom: dismissable ? 0 : 16
    }]
  }, icon ? /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.icon
  }, /*#__PURE__*/React.createElement(Icon, {
    name: icon,
    size: 40
  })) : null, /*#__PURE__*/React.createElement(_reactNative.Text, {
    style: [styles.message, {
      color: theme.colors.text
    }],
    accessibilityLiveRegion: visible ? "polite" : "none",
    accessibilityRole: "alert"
  }, content)), dismissable ? /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.actions
  }, /*#__PURE__*/React.createElement(_reactNative.Button, {
    color: buttonColor || theme.colors.primary,
    title: "Close",
    onPress: () => setVisible(false)
  })) : null)));
};

const styles = _reactNative.StyleSheet.create({
  container: {
    elevation: ELEVATION
  },
  wrapper: {
    overflow: "hidden",
    alignSelf: "center",
    width: "100%",
    maxWidth: DEFAULT_MAX_WIDTH
  },
  absolute: {
    position: "absolute",
    top: 0,
    width: "100%"
  },
  content: {
    flexDirection: "row",
    justifyContent: "flex-start",
    marginHorizontal: 8,
    marginTop: 16,
    marginBottom: 0
  },
  icon: {
    margin: 8
  },
  message: {
    flex: 1,
    margin: 8
  },
  actions: {
    flexDirection: "row",
    justifyContent: "flex-end",
    margin: 8
  }
});

var _default = (0, _theming.withTheme)(Banner);

exports.default = _default;
//# sourceMappingURL=Banner.js.map