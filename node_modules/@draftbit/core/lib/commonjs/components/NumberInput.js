"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _lodash = require("lodash");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const NumberInput = _ref => {
  let {
    onChangeText,
    value,
    defaultValue,
    ...props
  } = _ref;
  const [currentStringNumberValue, setCurrentStringNumberValue] = (0, _react.useState)("0");

  const formatValueToStringNumber = valueToFormat => {
    if (valueToFormat != null) {
      if ((0, _lodash.isString)(valueToFormat) && valueToFormat !== "") {
        if (/^0[1-9]$/.test(valueToFormat)) {
          return valueToFormat.slice(1);
        } else if (/^[+-]?([0-9]+\.?[0-9]*|\.[0-9]+)$/.test(valueToFormat)) {
          return valueToFormat;
        } else {
          return currentStringNumberValue;
        }
      } else if ((0, _lodash.isNumber)(valueToFormat) && !(0, _lodash.isNaN)(valueToFormat)) {
        return valueToFormat.toString();
      }
    }

    return "0";
  }; // set currentStringNumberValue as defaultValue prop if there is a differnce on first render only


  (0, _react.useEffect)(() => {
    const defaultStringNumberValue = formatValueToStringNumber(defaultValue);

    if (currentStringNumberValue !== defaultStringNumberValue) {
      setCurrentStringNumberValue(defaultStringNumberValue);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);

  const handleChangeText = newValue => {
    const newStringNumberValue = formatValueToStringNumber(newValue);
    const number = parseFloat(newStringNumberValue);
    setCurrentStringNumberValue(newStringNumberValue);
    onChangeText === null || onChangeText === void 0 ? void 0 : onChangeText(number);
  }; // run handleChangeText with value prop only when value prop changes (and first render to reset currentStringNumberValue)


  (0, _react.useEffect)(() => {
    const nextStringNumberValue = formatValueToStringNumber(value);

    if (currentStringNumberValue !== nextStringNumberValue) {
      handleChangeText(nextStringNumberValue);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [value]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.TextInput, _extends({
    keyboardType: "numeric",
    value: currentStringNumberValue,
    onChangeText: handleChangeText
  }, props));
};

var _default = NumberInput;
exports.default = _default;
//# sourceMappingURL=NumberInput.js.map