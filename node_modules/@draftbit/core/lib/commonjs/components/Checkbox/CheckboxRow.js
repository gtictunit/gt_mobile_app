"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Direction = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _lodash = require("lodash");

var _utilities = require("../../utilities");

var _hooks = require("../../hooks");

var _Text = _interopRequireDefault(require("../Text"));

var _Touchable = _interopRequireDefault(require("../Touchable"));

var _Checkbox = _interopRequireDefault(require("./Checkbox"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

let Direction;
exports.Direction = Direction;

(function (Direction) {
  Direction["Row"] = "row";
  Direction["RowReverse"] = "row-reverse";
})(Direction || (exports.Direction = Direction = {}));

const renderLabel = (value, labelStyle, textStyle) => {
  if ((0, _lodash.isString)(value)) {
    return /*#__PURE__*/React.createElement(_Text.default, {
      style: [textStyle, labelStyle]
    }, value);
  } else {
    return /*#__PURE__*/React.createElement(React.Fragment, null, value);
  }
};

const CheckboxRow = _ref => {
  let {
    label = "Label",
    labelStyle,
    labelContainerStyle,
    checkboxStyle,
    direction = Direction.Row,
    Icon,
    status,
    disabled = false,
    onPress,
    onCheck,
    onUncheck,
    color,
    uncheckedColor,
    defaultValue,
    checkedIcon,
    uncheckedIcon,
    size,
    style,
    ...rest
  } = _ref;
  const [internalValue, setInternalValue] = React.useState(status || defaultValue || false);
  React.useEffect(() => {
    if (status != null) {
      setInternalValue(status);
    }
  }, [status]); // This special logic is to handle weird APIs like Airtable that return
  // true or undefined for a boolean

  const previousDefaultValue = (0, _hooks.usePrevious)(defaultValue);
  React.useEffect(() => {
    if (defaultValue !== previousDefaultValue) {
      setInternalValue(Boolean(defaultValue));
    }
  }, [defaultValue, previousDefaultValue]);

  const handlePress = () => {
    const newValue = !internalValue;
    setInternalValue(newValue);
    onPress === null || onPress === void 0 ? void 0 : onPress(newValue);

    if (newValue) {
      onCheck === null || onCheck === void 0 ? void 0 : onCheck();
    }

    if (!newValue) {
      onUncheck === null || onUncheck === void 0 ? void 0 : onUncheck();
    }
  };

  const {
    textStyles,
    viewStyles
  } = (0, _utilities.extractStyles)(style);
  return /*#__PURE__*/React.createElement(_Touchable.default, _extends({
    onPress: handlePress,
    style: [viewStyles, styles.mainParent, {
      flexDirection: direction
    }],
    disabled: disabled
  }, rest), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.label, {
      alignItems: direction === Direction.Row ? "flex-start" : "flex-end"
    }, labelContainerStyle]
  }, renderLabel(label, textStyles, labelStyle)), /*#__PURE__*/React.createElement(_Checkbox.default, {
    Icon: Icon,
    status: internalValue,
    style: checkboxStyle,
    disabled: disabled,
    onPress: handlePress,
    color: color,
    uncheckedColor: uncheckedColor,
    checkedIcon: checkedIcon,
    uncheckedIcon: uncheckedIcon,
    size: size
  }));
};

const styles = _reactNative.StyleSheet.create({
  mainParent: {
    alignItems: "center",
    justifyContent: "space-around",
    paddingStart: 20,
    minHeight: 50,
    paddingEnd: 20,
    display: "flex",
    ..._reactNative.Platform.select({
      web: {
        cursor: "pointer",
        userSelect: "none"
      }
    })
  },
  label: {
    flex: 3
  }
});

var _default = CheckboxRow;
exports.default = _default;
//# sourceMappingURL=CheckboxRow.js.map