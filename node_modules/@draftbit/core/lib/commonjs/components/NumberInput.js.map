{"version":3,"names":["NumberInput","onChangeText","value","defaultValue","props","currentStringNumberValue","setCurrentStringNumberValue","useState","formatValueToStringNumber","valueToFormat","isString","test","slice","isNumber","isNaN","toString","useEffect","defaultStringNumberValue","handleChangeText","newValue","newStringNumberValue","number","parseFloat","nextStringNumberValue"],"sources":["NumberInput.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from \"react\";\nimport { TextInput } from \"react-native\";\nimport { isString, isNumber, isNaN } from \"lodash\";\n\ninterface Props {\n  value?: number | string;\n  defaultValue?: number | string;\n  onChangeText?: (value?: number) => void;\n}\n\nconst NumberInput: FC<Props> = ({\n  onChangeText,\n  value,\n  defaultValue,\n  ...props\n}) => {\n  const [currentStringNumberValue, setCurrentStringNumberValue] = useState(\"0\");\n\n  const formatValueToStringNumber = (valueToFormat?: number | string) => {\n    if (valueToFormat != null) {\n      if (isString(valueToFormat) && valueToFormat !== \"\") {\n        if (/^0[1-9]$/.test(valueToFormat)) {\n          return valueToFormat.slice(1);\n        } else if (/^[+-]?([0-9]+\\.?[0-9]*|\\.[0-9]+)$/.test(valueToFormat)) {\n          return valueToFormat;\n        } else {\n          return currentStringNumberValue;\n        }\n      } else if (isNumber(valueToFormat) && !isNaN(valueToFormat)) {\n        return valueToFormat.toString();\n      }\n    }\n\n    return \"0\";\n  };\n\n  // set currentStringNumberValue as defaultValue prop if there is a differnce on first render only\n  useEffect(() => {\n    const defaultStringNumberValue = formatValueToStringNumber(defaultValue);\n\n    if (currentStringNumberValue !== defaultStringNumberValue) {\n      setCurrentStringNumberValue(defaultStringNumberValue);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleChangeText = (newValue: string) => {\n    const newStringNumberValue = formatValueToStringNumber(newValue);\n    const number = parseFloat(newStringNumberValue);\n\n    setCurrentStringNumberValue(newStringNumberValue);\n    onChangeText?.(number);\n  };\n\n  // run handleChangeText with value prop only when value prop changes (and first render to reset currentStringNumberValue)\n  useEffect(() => {\n    const nextStringNumberValue = formatValueToStringNumber(value);\n\n    if (currentStringNumberValue !== nextStringNumberValue) {\n      handleChangeText(nextStringNumberValue);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n\n  return (\n    <TextInput\n      keyboardType=\"numeric\"\n      value={currentStringNumberValue}\n      onChangeText={handleChangeText}\n      {...props}\n    />\n  );\n};\n\nexport default NumberInput;\n"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAQA,MAAMA,WAAsB,GAAG,QAKzB;EAAA,IAL0B;IAC9BC,YAD8B;IAE9BC,KAF8B;IAG9BC,YAH8B;IAI9B,GAAGC;EAJ2B,CAK1B;EACJ,MAAM,CAACC,wBAAD,EAA2BC,2BAA3B,IAA0D,IAAAC,eAAA,EAAS,GAAT,CAAhE;;EAEA,MAAMC,yBAAyB,GAAIC,aAAD,IAAqC;IACrE,IAAIA,aAAa,IAAI,IAArB,EAA2B;MACzB,IAAI,IAAAC,gBAAA,EAASD,aAAT,KAA2BA,aAAa,KAAK,EAAjD,EAAqD;QACnD,IAAI,WAAWE,IAAX,CAAgBF,aAAhB,CAAJ,EAAoC;UAClC,OAAOA,aAAa,CAACG,KAAd,CAAoB,CAApB,CAAP;QACD,CAFD,MAEO,IAAI,oCAAoCD,IAApC,CAAyCF,aAAzC,CAAJ,EAA6D;UAClE,OAAOA,aAAP;QACD,CAFM,MAEA;UACL,OAAOJ,wBAAP;QACD;MACF,CARD,MAQO,IAAI,IAAAQ,gBAAA,EAASJ,aAAT,KAA2B,CAAC,IAAAK,aAAA,EAAML,aAAN,CAAhC,EAAsD;QAC3D,OAAOA,aAAa,CAACM,QAAd,EAAP;MACD;IACF;;IAED,OAAO,GAAP;EACD,CAhBD,CAHI,CAqBJ;;;EACA,IAAAC,gBAAA,EAAU,MAAM;IACd,MAAMC,wBAAwB,GAAGT,yBAAyB,CAACL,YAAD,CAA1D;;IAEA,IAAIE,wBAAwB,KAAKY,wBAAjC,EAA2D;MACzDX,2BAA2B,CAACW,wBAAD,CAA3B;IACD,CALa,CAMd;;EACD,CAPD,EAOG,EAPH;;EASA,MAAMC,gBAAgB,GAAIC,QAAD,IAAsB;IAC7C,MAAMC,oBAAoB,GAAGZ,yBAAyB,CAACW,QAAD,CAAtD;IACA,MAAME,MAAM,GAAGC,UAAU,CAACF,oBAAD,CAAzB;IAEAd,2BAA2B,CAACc,oBAAD,CAA3B;IACAnB,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAGoB,MAAH,CAAZ;EACD,CAND,CA/BI,CAuCJ;;;EACA,IAAAL,gBAAA,EAAU,MAAM;IACd,MAAMO,qBAAqB,GAAGf,yBAAyB,CAACN,KAAD,CAAvD;;IAEA,IAAIG,wBAAwB,KAAKkB,qBAAjC,EAAwD;MACtDL,gBAAgB,CAACK,qBAAD,CAAhB;IACD,CALa,CAMd;;EACD,CAPD,EAOG,CAACrB,KAAD,CAPH;EASA,oBACE,6BAAC,sBAAD;IACE,YAAY,EAAC,SADf;IAEE,KAAK,EAAEG,wBAFT;IAGE,YAAY,EAAEa;EAHhB,GAIMd,KAJN,EADF;AAQD,CA9DD;;eAgEeJ,W"}